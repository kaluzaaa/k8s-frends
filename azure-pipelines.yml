# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
  - stage: Build
    displayName: 'Build my-app'
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'acr'
            repository: 'demo-app'
            command: 'buildAndPush'
            Dockerfile: 'src/Dockerfile'
            buildContext: 'src/.'
        - script:  |
            mkdir $HOME/.local/bin
            export PATH=$PATH:$HOME/.local/bin
            curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
            kubescape scan --format junit --output results.xml ./k8s/.
          displayName: 'Run Kubescape'
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit' 
            testResultsFiles: 'results.xml'
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: 'k8s'
            artifact: 'manifest'
            publishLocation: 'pipeline'

  - stage: DeployDEV
    displayName: 'Deploy to DEV'
    dependsOn: Build
    variables:
      namespace: dev
      ingress: $(ingress_dev)
    jobs:
      - deployment: DeployDEV
        displayName: 'Deploy to DEV'
        pool:
          vmImage: ubuntu-latest
        environment: dev
        strategy:
         runOnce:
           deploy:
             steps:
               - task: DownloadPipelineArtifact@2
                 inputs:
                   buildType: 'current'
                   artifactName: 'manifest'
                   targetPath: '$(Pipeline.Workspace)'

               - task: CmdLine@2
                 inputs:
                   script: 'kubectl create cm my-app-config  --from-file=$(Pipeline.Workspace)/$(namespace)/appsettings.json -o yaml --dry-run=client > $(Pipeline.Workspace)/cm.yaml'
               - task: CmdLine@2
                 inputs:
                   script: 'ls -la $(Pipeline.Workspace)'

               - task: replacetokens@5
                 inputs:
                   targetFiles: '$(Pipeline.Workspace)/*.yaml'
                   encoding: 'auto'
                   tokenPattern: 'default'
                   writeBOM: true
                   actionOnMissing: 'warn'
                   keepToken: false
                   actionOnNoFiles: 'continue'
                   enableTransforms: false
                   enableRecursion: false
                   useLegacyPattern: false
                   enableTelemetry: true
               - task: KubernetesManifest@1
                 inputs:
                   action: 'deploy'
                   connectionType: 'kubernetesServiceConnection'
                   kubernetesServiceConnection: 'dev-aks-dev-1688125612163'
                   namespace: '$(namespace)'
                   manifests: '$(Pipeline.Workspace)/*.yaml'
                   containers: 'frendsaksdemo.azurecr.io/demo-app:$(Build.BuildId)'


  - stage: DeployPROD
    displayName: 'Deploy to PROD'
    dependsOn: DeployDEV
    variables:
      namespace: prod
      ingress: $(ingress_prod)
    jobs:
      - deployment: DeployPROD
        displayName: 'Deploy to PROD'
        pool:
          vmImage: ubuntu-latest
        environment: prod
        strategy:
         runOnce:
           deploy:
             steps:
               - task: DownloadPipelineArtifact@2
                 inputs:
                   buildType: 'current'
                   artifactName: 'manifest'
                   targetPath: '$(Pipeline.Workspace)'
               - task: CmdLine@2
                 inputs:
                   script: 'ls -la $(Pipeline.Workspace)'
               - task: replacetokens@5
                 inputs:
                   targetFiles: '$(Pipeline.Workspace)/*.yaml'
                   encoding: 'auto'
                   tokenPattern: 'default'
                   writeBOM: true
                   actionOnMissing: 'warn'
                   keepToken: false
                   actionOnNoFiles: 'continue'
                   enableTransforms: false
                   enableRecursion: false
                   useLegacyPattern: false
                   enableTelemetry: true
               - task: KubernetesManifest@1
                 inputs:
                   action: 'deploy'
                   connectionType: 'kubernetesServiceConnection'
                   kubernetesServiceConnection: 'prod-aks-prod-1688125649034'
                   namespace: '$(namespace)'
                   manifests: '$(Pipeline.Workspace)/*.yaml'
                   containers: 'frendsaksdemo.azurecr.io/demo-app:$(Build.BuildId)'